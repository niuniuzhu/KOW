using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace ProtoGenerator
{
	public class TSWritter : IWriter
	{
		public bool WriteDesc( string ns, Dictionary<string, int> clsToMsgID, Dictionary<string, string> responseToMsgID, string outputPath, ref string error )
		{
			StringBuilder sb = new StringBuilder();

			sb.AppendLine( "//<auto-generated>\r\n//\tGenerated by proto generator.  DO NOT EDIT!\r\n//</auto-generated>" );
			sb.AppendLine( "//ReSharper disable CheckNamespace" );
			sb.AppendLine( $"import {{ {ns} }} from \"../Libs/protos\";" );
			sb.AppendLine();
			sb.AppendLine( "export class ProtoCreator {" );

			//type to id
			sb.AppendLine( $"\tprivate static _init:boolean = false;" );
			sb.AppendLine( $"\tprivate static readonly _TYPE2ID = new Map<new () => any, {ns}.MsgID>();" );
			//id to type
			sb.AppendLine( $"\tprivate static readonly _ID2TYPE = new Map<{ns}.MsgID, new () => any>();" );
			sb.AppendLine();

			sb.AppendLine( "\tpublic static Init():void {" );
			sb.AppendLine( "\t\tif (this._init) {" );
			sb.AppendLine( "\t\t\treturn;" );
			sb.AppendLine( "\t\t}" );
			sb.AppendLine( "\t\tthis._init = true;" );
			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
				sb.AppendLine( $"\t\tProtoCreator._TYPE2ID.set( {ns}.{kv.Key}, <{ns}.MsgID>{kv.Value} );" );
			sb.AppendLine();
			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
				sb.AppendLine( $"\t\tProtoCreator._ID2TYPE.set( <{ns}.MsgID>{kv.Value}, {ns}.{kv.Key} );" );
			sb.AppendLine( "\t}" );

			//构造转发消息
			sb.AppendLine( "\tpublic static MakeTransMessage( msg:any, transTarget:number, transID:number ):void {" );
			sb.AppendLine( "\t\tmsg.opts.flag |= 1 << 3;//mark as transpose" );
			sb.AppendLine( "\t\tmsg.opts.flag |= 1 << (3+transTarget);//mark the target" );
			sb.AppendLine( "\t\tmsg.opts.transid = transID;" );
			sb.AppendLine( "\t}" );

			//proto generator class
			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
			{
				sb.AppendLine( $"\tpublic static Q_{kv.Key}(): {ns}.{kv.Key} {{" );
				sb.AppendLine( $"\t\tlet msg = new {ns}.{kv.Key}();" );
				sb.AppendLine( $"\t\tmsg.opts = new {ns}.MsgOpts();" );
				if ( responseToMsgID.ContainsKey( kv.Key ) )
					sb.AppendLine( $"\t\tmsg.opts.flag |= 1 << {ns}.MsgOpts.Flag.RPC;" );
				sb.AppendLine( "\t\treturn msg;" );
				sb.AppendLine( "\t}" );
				sb.AppendLine();
			}
			//end
			sb.AppendLine();

			//response message static functions
			foreach ( KeyValuePair<string, string> kv in responseToMsgID )
			{
				sb.AppendLine( $"\tpublic static R_{kv.Key}(pid: number): {ns}.{kv.Value} {{" );
				sb.AppendLine( $"\t\tlet msg = new {ns}.{kv.Value}();" );
				sb.AppendLine( $"\t\tmsg.opts = new {ns}.MsgOpts();" );
				sb.AppendLine( $"\t\tmsg.opts.flag |= 1 << {ns}.MsgOpts.Flag.RESP;" );
				sb.AppendLine( "\t\tmsg.opts.rpid = pid;" );
				sb.AppendLine( "\t\treturn msg;" );
				sb.AppendLine( "\t}" );
				sb.AppendLine();
			}
			//end
			sb.AppendLine();

			//decode message static functions
			sb.AppendLine( $"\tpublic static DecodeMsg(msgID: {ns}.MsgID, data: Uint8Array, size: number): any {{" );
			sb.AppendLine( "\t\tswitch ( msgID ) {" );
			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
			{
				sb.AppendLine( $"\t\t\tcase {kv.Value}: {{" );
				sb.AppendLine( $"\t\t\t\tlet msg = {ns}.{kv.Key}.decode(data, size);" );
				sb.AppendLine( "\t\t\t\treturn msg;" );
				sb.AppendLine( "\t\t\t}" );
			}
			sb.AppendLine( "\t\t}" );
			sb.AppendLine( "\t\treturn null;" );
			sb.AppendLine( "\t}" );
			sb.AppendLine();

			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
			{
				sb.AppendLine( $"\tpublic static D_{kv.Key}(data: Uint8Array, size: number): {ns}.{kv.Key} {{" );
				sb.AppendLine( $"\t\tlet msg = {ns}.{kv.Key}.decode(data, size);" );
				sb.AppendLine( "\t\treturn msg;" );
				sb.AppendLine( "\t}" );
				sb.AppendLine();
			}
			//end
			sb.AppendLine();

			//CreateMessageByID
			sb.AppendLine( "\tpublic static CreateMsgByID(msgID:Protos.MsgID): any {" );
			sb.AppendLine( "\t\tswitch ( msgID ) {" );
			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
			{
				sb.AppendLine( $"\t\t\tcase {kv.Value}: {{" );
				sb.AppendLine( $"\t\t\t\treturn new {ns}.{kv.Key}();" );
				sb.AppendLine( "\t\t\t}" );
			}
			sb.AppendLine( "\t\t}" );
			sb.AppendLine( "\t\treturn null;" );
			sb.AppendLine( "\t}" );
			//end CreateMessageByID
			sb.AppendLine();

			//Get options
			sb.AppendLine( $"\tpublic static GetMsgOpts(message: any): {ns}.IMsgOpts {{" );
			sb.AppendLine( "\t\tlet msgID = ProtoCreator.GetMsgID(message);" );
			sb.AppendLine( "\t\tswitch ( msgID ) {" );
			foreach ( KeyValuePair<string, int> kv in clsToMsgID )
			{
				sb.AppendLine( $"\t\t\tcase {kv.Value}: {{" );
				sb.AppendLine( $"\t\t\t\treturn (<{ns}.{kv.Key}>message).opts;" );
				sb.AppendLine( "\t\t\t}" );
			}
			sb.AppendLine( "\t\t}" );
			sb.AppendLine( "\t\treturn null;" );
			sb.AppendLine( "\t}" );
			//end Get options
			sb.AppendLine();

			sb.AppendLine( $"\tpublic static GetMsgIDByType(type: new () => any): {ns}.MsgID {{ return ProtoCreator._TYPE2ID.get(type); }}" );
			sb.AppendLine();

			sb.AppendLine( $"\tpublic static GetMsgID(message: any): {ns}.MsgID {{ return ProtoCreator._TYPE2ID.get(message.constructor); }}" );
			sb.AppendLine();

			sb.AppendLine( "} //end class" );
			try
			{
				File.WriteAllText( outputPath, sb.ToString(), Encoding.UTF8 );
			}
			catch ( Exception e )
			{
				error = e.ToString();
				return false;
			}
			return true;
		}
	}
}